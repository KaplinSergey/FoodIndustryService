// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace FoodIndustryService.Core.Tests.Scenarios
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Orders")]
    public partial class OrdersFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Orders.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Orders", "\tAs a customer\r\n  I want to deal with Orders functionality", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add simple order")]
        [NUnit.Framework.CategoryAttribute("AddOrder")]
        public virtual void AddSimpleOrder()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add simple order", new string[] {
                        "AddOrder"});
#line 6
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Price",
                        "Amount"});
            table1.AddRow(new string[] {
                        "White Vine",
                        "10",
                        "1"});
#line 7
 testRunner.Given("I have added following products into the order", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Price"});
            table2.AddRow(new string[] {
                        "All  price",
                        "10"});
#line 10
  testRunner.Then("All price calculated with price policy is", ((string)(null)), table2, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Price",
                        "Amount"});
            table3.AddRow(new string[] {
                        "Bear",
                        "5",
                        "2"});
#line 13
 testRunner.And("I have added following products into the order", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Price"});
            table4.AddRow(new string[] {
                        "All  price",
                        "20"});
#line 16
  testRunner.Then("All price calculated with price policy is", ((string)(null)), table4, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table5.AddRow(new string[] {
                        "Ivan"});
#line 19
 testRunner.When("I press add order and set customer info", ((string)(null)), table5, "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "CustomerName",
                        "Name",
                        "Price",
                        "Amount"});
            table6.AddRow(new string[] {
                        "Ivan",
                        "White Vine",
                        "10",
                        "1"});
            table6.AddRow(new string[] {
                        "Ivan",
                        "Bear",
                        "5",
                        "2"});
#line 22
 testRunner.Then("the Order should be added on the Orders system", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Edit simple order")]
        [NUnit.Framework.CategoryAttribute("EditAndAddOrder")]
        public virtual void EditSimpleOrder()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Edit simple order", new string[] {
                        "EditAndAddOrder"});
#line 28
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Price",
                        "Amount"});
            table7.AddRow(new string[] {
                        "White Vine",
                        "10",
                        "1"});
#line 29
 testRunner.Given("I have added following products into the order", ((string)(null)), table7, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Price"});
            table8.AddRow(new string[] {
                        "All  price",
                        "10"});
#line 32
  testRunner.Then("All price calculated with price policy is", ((string)(null)), table8, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Price",
                        "Amount"});
            table9.AddRow(new string[] {
                        "Bear",
                        "5",
                        "2"});
#line 35
 testRunner.And("I have added following products into the order", ((string)(null)), table9, "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Price"});
            table10.AddRow(new string[] {
                        "All  price",
                        "20"});
#line 38
  testRunner.Then("All price calculated with price policy is", ((string)(null)), table10, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Price",
                        "Amount"});
            table11.AddRow(new string[] {
                        "Bear",
                        "5",
                        "1"});
#line 41
  testRunner.And("I have deleted following products from the order", ((string)(null)), table11, "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Price"});
            table12.AddRow(new string[] {
                        "All  price",
                        "15"});
#line 44
  testRunner.Then("All price calculated with price policy is", ((string)(null)), table12, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table13.AddRow(new string[] {
                        "Ivan"});
#line 47
 testRunner.When("I press add order and set customer info", ((string)(null)), table13, "When ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "CustomerName",
                        "Name",
                        "Price",
                        "Amount"});
            table14.AddRow(new string[] {
                        "Ivan",
                        "White Vine",
                        "10",
                        "1"});
            table14.AddRow(new string[] {
                        "Ivan",
                        "Bear",
                        "5",
                        "1"});
#line 50
 testRunner.Then("the Order should be added on the Orders system", ((string)(null)), table14, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
